<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Jinliang Yang</title>
        <description>Jinliang Yang - Jinliang Yang</description>
        <link>http://yangjl.com/en</link>
        <link>http://yangjl.com/en</link>
        <lastBuildDate>2016-09-09T13:52:34-07:00</lastBuildDate>
        <pubDate>2016-09-09T13:52:34-07:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Customize Atom as a latex and markdown editor</title>
                <description>
&lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; is rapidly becoming my 2nd favorite code editor (after &lt;a href=&quot;https://www.rstudio.com/&quot;&gt;RStudio&lt;/a&gt;). Thanks to be an open source project, many add-on &lt;code class=&quot;highlighter-rouge&quot;&gt;themes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;packages&lt;/code&gt; hosted on &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt; make it very flexible. Here, I added some customized items to make it a text editor for &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;, i.e., to write this blog, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTex&lt;/code&gt; editor, i.e., to write my research papers. I am using a Mac with &lt;code class=&quot;highlighter-rouge&quot;&gt;OS X El Capitan v10.11.6&lt;/code&gt; and installed Atom &lt;code class=&quot;highlighter-rouge&quot;&gt;v1.10.2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;basic-setting&quot;&gt;Basic Setting&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor Setting&lt;/code&gt;, check &lt;code class=&quot;highlighter-rouge&quot;&gt;Soft Wrap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Soft Wrap at preferred line length&lt;/code&gt;. By doing this, we can take advantage of multiple panels viewing of the editor.&lt;/li&gt;
  &lt;li&gt;Install some &lt;code class=&quot;highlighter-rouge&quot;&gt;UI Themes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Syntax Themes&lt;/code&gt; for your languages. I installed &lt;code class=&quot;highlighter-rouge&quot;&gt;genesis-ui&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flatwhite-syntax&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Textmate Forlatex&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTex&lt;/code&gt;. There are many other choices, which is the beauty of this editor.&lt;/li&gt;
  &lt;li&gt;Note to correct a spelling error (there is a build-in spelling check package. we can also add &lt;code class=&quot;highlighter-rouge&quot;&gt;Linter&lt;/code&gt; and sub-packages), just click &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+:&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;File-icons&lt;/code&gt;. Pretty beautiful for visualization.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Gk9exmq.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;

&lt;p&gt;I like everything to be version controlled. Therefore, some github add-ons would be necessary.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Git-time-machine&lt;/code&gt; allows you to travel back in time. It shows visual plot of commits to the current file over time.  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Merge-conflicts&lt;/code&gt; may also worth to try.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;for-markdown&quot;&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;With a build-in package &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown Preview&lt;/code&gt;, now I can writing and viewing this blog post at the same time. What an awesome experience!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/TuMkYDU.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;for-latex&quot;&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTex&lt;/code&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;latextools&lt;/code&gt; tends to provide all you needs for &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTex&lt;/code&gt; editing. It can compile and view PDF files. And jump to the line.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linter-chktex&lt;/code&gt; provides real-time stylistic checking as you write.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;todo-show&lt;/code&gt; finds all the TODOs, FIXMEs, etc. in your projects. Note only search key words in Capitan. It could be a useful tool for &lt;code class=&quot;highlighter-rouge&quot;&gt;Latex&lt;/code&gt; commenting and editing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/XyOVDWX.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;share-page&quot;&gt;
&lt;h2 style=&quot;background:#faebd7;&quot;&gt;
    Share this on &amp;rarr; 
    &lt;a href=&quot;https://twitter.com/intent/tweet?text=Customize Atom as a latex and markdown editor&amp;amp;url=http://yangjl.com/journal%20club/2016/09/09/atom&amp;amp;via=&amp;amp;related=&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;Twitter&lt;/a&gt;
    &lt;a href=&quot;https://facebook.com/sharer.php?u=http://yangjl.com/journal%20club/2016/09/09/atom&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Facebook&quot;&gt;Facebook&lt;/a&gt;
    &lt;a href=&quot;https://plus.google.com/share?url=http://yangjl.com/journal%20club/2016/09/09/atom&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Google+&quot;&gt;Google+&lt;/a&gt;
&lt;/h2&gt; 
&lt;style type=&quot;text/css&quot;&gt;
	.share-page {
    	text-align: center;
    	background: $secondary-color;
    	color: $light-color;
    	padding: 8px 15px;
    	border-radius: 5px;
    	margin: 1.5 * $spacing-unit 0;

    	h2 {
        	font-weight: 700;
        	color: #458b74;
        	margin-left: 10px;

        	&amp;:hover {
            	border-bottom: 1px dashed #458b74;
        	}
    	}
	}
&lt;/style&gt;	
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/journal%20club/2016/09/09/atom</link>
                <guid>http://yangjl.com/en/journal%20club/2016/09/09/atom</guid>
                <pubDate>2016-09-09T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Comments on a RAHAB paper</title>
                <description>
&lt;p&gt;&lt;a href=&quot;http://www.pnas.org/content/112/35/E4959.long&quot;&gt;Wang &lt;em&gt;et. al.&lt;/em&gt;, 2015&lt;/a&gt; created a set of F4-F6 pure breeding lines, called hybrid mimics, which exhibit hybrid vigor similar to F1 hybrids in &lt;em&gt;Arabidopsis&lt;/em&gt;. The authors compared the differentially expressed genes in F1 hybrid and the hybrid mimics; and found similar expression pattern between them. The authors proposed that the altered expression could be a consequence of trans-regulation of genes or epigenetic modifications.&lt;/p&gt;

&lt;p&gt;In general, during R-I lab &lt;a href=&quot;http://www.rilab.org/rehab.html&quot;&gt;R.E.H.A.B.&lt;/a&gt; discussion, most of us liked the paper. It was well written with explicit figures. The authors selected rosette diameter as a trait of interest. With the selection intensity of 4-10%, they were able to create F4-F6 hybrid mimics, which provided evidence to argue back early criticism about the complementation of deleterious alleles in explaining heterosis. The early idea was that if the complementation hypothesis were ture, it should be able to create an hybrid-like inbred line with all of the superior alleles. The current observation showed that the hybrid-like lines could indeed be created for rosette diameter in &lt;em&gt;Arabidopsis&lt;/em&gt;. Therefore, rejected this early criticism against dominant complementation theory for heterosis. But the trait in current study may be controlled by relative few segregating genetic variants. For more complex traits, like grain yield, hybrid mimics may be hard or almost impossible to obtain.&lt;/p&gt;

&lt;p&gt;The authors referred their selection method as “recurrent selection”. However, I do not think it is the same recurrent selection we used in plant breeding. In plant breeding, the inbred parents were &lt;a href=&quot;https://dl.sciencesocieties.org/publications/aj/abstracts/37/2/AJ0370020134&quot;&gt;selected recurrently&lt;/a&gt; from the interbreeding plants according to their combining abilities. I think in current study, what the authors did was just “selection”. This potential terminology issue would not affect their analysis.&lt;/p&gt;

&lt;p&gt;I liked the way the authors used to present gene expression profiles in &lt;strong&gt;Fig.4&lt;/strong&gt; and &lt;strong&gt;Fig.5&lt;/strong&gt;. We all understand that RNA-seq data are difficult to present. The authors came up with this very smart strategy to compare DEG among different lines. In panel B of &lt;strong&gt;Fig.4&lt;/strong&gt;, one of the F4 lines looks very similar to the hybrid. However, it may not that obvious for other lines, especially with only one negative control. If a test statistics was employed to quantify the difference, it would be a more solid analysis. (I know I have been too picky about this. :( ) We found that the scales for &lt;strong&gt;Fig.4&lt;/strong&gt; and &lt;strong&gt;Fig.5&lt;/strong&gt; are different. We were wondering why in one study the scales changed from -5 to 5, but in the other, from -50 to 50. And, the criterion they used for detecting DEG were less stringent than normally used (FC &amp;gt;= 1.3 and P-value &amp;lt; 0.05 in this study, normally FC &amp;gt; 2 and FDR &amp;lt; 0.05).  &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Fig.6&lt;/strong&gt;, we expected the authors to conduct a genetic scanning to confirm whether there were heterozygosity regions shared among lines. Unfortunately, they failed to deliver this message. It would be interesting to see, in the future, the dissection of the genetic architecture of this trait and the genetic explanations of heterosis for these very interesting hybrid mimics.&lt;/p&gt;

&lt;div class=&quot;share-page&quot;&gt;
&lt;h2 style=&quot;background:#faebd7;&quot;&gt;
    Share this on &amp;rarr; 
    &lt;a href=&quot;https://twitter.com/intent/tweet?text=Comments on a RAHAB paper&amp;amp;url=http://yangjl.com/journal%20club/2015/10/05/rehab&amp;amp;via=&amp;amp;related=&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;Twitter&lt;/a&gt;
    &lt;a href=&quot;https://facebook.com/sharer.php?u=http://yangjl.com/journal%20club/2015/10/05/rehab&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Facebook&quot;&gt;Facebook&lt;/a&gt;
    &lt;a href=&quot;https://plus.google.com/share?url=http://yangjl.com/journal%20club/2015/10/05/rehab&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Google+&quot;&gt;Google+&lt;/a&gt;
&lt;/h2&gt; 
&lt;style type=&quot;text/css&quot;&gt;
	.share-page {
    	text-align: center;
    	background: $secondary-color;
    	color: $light-color;
    	padding: 8px 15px;
    	border-radius: 5px;
    	margin: 1.5 * $spacing-unit 0;

    	h2 {
        	font-weight: 700;
        	color: #458b74;
        	margin-left: 10px;

        	&amp;:hover {
            	border-bottom: 1px dashed #458b74;
        	}
    	}
	}
&lt;/style&gt;	
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/journal%20club/2015/10/05/rehab</link>
                <guid>http://yangjl.com/en/journal%20club/2015/10/05/rehab</guid>
                <pubDate>2015-10-05T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>The art of command line</title>
                <description>
&lt;h1 id=&quot;the-art-of-command-line-copied-from-jlevyhttpsgithubcomjlevythe-art-of-command-lineblobmasterreadmemdgithub&quot;&gt;The Art of Command Line (copied from &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line/blob/master/README.md&quot;&gt;jlevy&lt;/a&gt;@github)&lt;/h1&gt;

&lt;p&gt;Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that I’ve found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.&lt;/p&gt;

&lt;p&gt;Much of this
&lt;a href=&quot;http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands&quot;&gt;originally&lt;/a&gt;
&lt;a href=&quot;http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix&quot;&gt;appeared&lt;/a&gt;
on &lt;a href=&quot;http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know&quot;&gt;Quora&lt;/a&gt;,
but given the interest there, it seems it’s worth using Github, where people more talented than I can readily suggest improvements. If you see an error or something that could be better, please submit an issue or PR!&lt;/p&gt;

&lt;p&gt;Scope:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The goals are breadth and brevity. Every tip is essential in some situation or significantly saves time over alternatives.&lt;/li&gt;
  &lt;li&gt;This is written for Linux. Many but not all items apply equally to MacOS (or even Cygwin).&lt;/li&gt;
  &lt;li&gt;The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.&lt;/li&gt;
  &lt;li&gt;Descriptions are intentionally minimal, with the expectation you’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt; to install, and Google for more background.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Learn basic Bash. Actually, type &lt;code class=&quot;highlighter-rouge&quot;&gt;man bash&lt;/code&gt; and at least skim the whole thing; it’s pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning &lt;em&gt;only&lt;/em&gt; zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Learn at least one text-based editor well. Ideally Vim (&lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt;), as there’s really no competition for random editing in a terminal (even if you use Emacs, a big IDE, or a modern hipster editor most of the time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Learn about redirection of output and input using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and pipes using &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;. Learn about stdout and stderr.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Learn about file glob expansion with &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; (and perhaps &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;) and quoting and the difference between double &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; and single &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt; quotes. (See more on variable expansion below.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be familiar with Bash job management: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;, &lt;strong&gt;ctrl-z&lt;/strong&gt;, &lt;strong&gt;ctrl-c&lt;/strong&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt;, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, and the basics of passwordless authentication, via &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add&lt;/code&gt;, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Basic file management: &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; (in particular, learn what every column in &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; means), &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tail -f&lt;/code&gt; (or even better, &lt;code class=&quot;highlighter-rouge&quot;&gt;less +F&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;ln&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s&lt;/code&gt; (learn the differences and advantages of hard versus soft links), &lt;code class=&quot;highlighter-rouge&quot;&gt;chown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; (for a quick summary of disk usage: &lt;code class=&quot;highlighter-rouge&quot;&gt;du -sk *&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Basic network management: &lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know regular expressions well, and the various flags to &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;egrep&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;-B&lt;/code&gt; options are worth knowing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Learn to use &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt; (depending on distro) to find and install packages. And make sure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; to install Python-based command-line tools (a few below are easiest to install via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;everyday-use&quot;&gt;Everyday use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In Bash, use &lt;strong&gt;ctrl-r&lt;/strong&gt; to search through command history.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Bash, use &lt;strong&gt;ctrl-w&lt;/strong&gt; to delete the last word, and &lt;strong&gt;ctrl-u&lt;/strong&gt; to delete the whole line. Use &lt;strong&gt;alt-b&lt;/strong&gt; and &lt;strong&gt;alt-f&lt;/strong&gt; to move by word, and &lt;strong&gt;ctrl-k&lt;/strong&gt; to kill to the end of the line. See &lt;code class=&quot;highlighter-rouge&quot;&gt;man readline&lt;/code&gt; for all the default keybindings in Bash. There are a lot. For example &lt;strong&gt;alt-.&lt;/strong&gt; cycles through previous arguments, and &lt;strong&gt;alt-&lt;/strong&gt;* expands a glob.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To go back to the previous working directory: &lt;code class=&quot;highlighter-rouge&quot;&gt;cd -&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are halfway through typing a command but change your mind, hit &lt;strong&gt;alt-#&lt;/strong&gt; to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; at the beginning and enter it as a comment (or use &lt;strong&gt;ctrl-a&lt;/strong&gt;, &lt;strong&gt;#&lt;/strong&gt;, &lt;strong&gt;enter&lt;/strong&gt;). You can then return to it later via command history.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel&lt;/code&gt;). It’s very powerful. Note you can control how many items execute per line (&lt;code class=&quot;highlighter-rouge&quot;&gt;-L&lt;/code&gt;) as well as parallelism (&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;). If you’re not sure if it’ll do the right thing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs echo&lt;/code&gt; first. Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;-I{}&lt;/code&gt; is handy.   Examples:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      find . -name '*.py' | xargs grep some_function 
      cat hosts | xargs -I{} ssh root@{} hostname 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pstree -p&lt;/code&gt; is a helpful display of the process tree.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;pgrep&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pkill&lt;/code&gt; to find or signal processes by name (&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; is helpful).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know the various signals you can send processes. For example, to suspend a process, use &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -STOP [pid]&lt;/code&gt;. For the full list, see &lt;code class=&quot;highlighter-rouge&quot;&gt;man 7 signal&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;nohup&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;disown&lt;/code&gt; if you want a background process to keep running forever.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check what processes are listening via &lt;code class=&quot;highlighter-rouge&quot;&gt;netstat -lntp&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;See also &lt;code class=&quot;highlighter-rouge&quot;&gt;lsof&lt;/code&gt; for open sockets and files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Bash scripts, use &lt;code class=&quot;highlighter-rouge&quot;&gt;set -x&lt;/code&gt; for debugging output. Use strict modes whenever possible. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt; to abort on errors. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;set -o pipefail&lt;/code&gt; as well, to be strict about errors (though this topic is a bit subtle). For more involved scripts, also use &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      # do something in current dir
      (cd /some/other/dir; other-command)
      # continue in original dir
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: &lt;code class=&quot;highlighter-rouge&quot;&gt;${name:?error message}&lt;/code&gt;. For example, if a Bash script requires a single argument, just write &lt;code class=&quot;highlighter-rouge&quot;&gt;input_file=${1:?usage: $0 input_file}&lt;/code&gt;. Arithmetic expansion: &lt;code class=&quot;highlighter-rouge&quot;&gt;i=$(( (i + 1) % 5 ))&lt;/code&gt;. Sequences: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1..10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Trimming of strings: &lt;code class=&quot;highlighter-rouge&quot;&gt;${var%suffix}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;${var#prefix}&lt;/code&gt;. For example if &lt;code class=&quot;highlighter-rouge&quot;&gt;var=foo.pdf&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;echo ${var%.pdf}.txt&lt;/code&gt; prints &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.txt&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The output of a command can be treated like a file via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;(some command)&lt;/code&gt;. For example, compare local &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; with a remote one:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      diff /etc/hosts &amp;lt;(ssh somehost cat /etc/hosts)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Know about “here documents” in Bash, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;cat &amp;lt;&amp;lt;EOF ...&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Bash, redirect both standard output and standard error via: &lt;code class=&quot;highlighter-rouge&quot;&gt;some-command &amp;gt;logfile 2&amp;gt;&amp;amp;1&lt;/code&gt;. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/dev/null&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;man ascii&lt;/code&gt; for a good ASCII table, with hex and decimal values. For general encoding info, &lt;code class=&quot;highlighter-rouge&quot;&gt;man unicode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;man utf-8&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;man latin1&lt;/code&gt; are helpful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. A more minimal alternative for session persistence only is &lt;code class=&quot;highlighter-rouge&quot;&gt;dtach&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In ssh, knowing how to port tunnel with &lt;code class=&quot;highlighter-rouge&quot;&gt;-L&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; (and occasionally &lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt;) is useful, e.g. to access web sites from a remote server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It can be useful to make a few optimizations to your ssh configuration; for example, this &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; contains settings to avoid dropped connections in certain network environments, use compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: &lt;code class=&quot;highlighter-rouge&quot;&gt;StrictHostKeyChecking=no&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ForwardAgent=yes&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To get the permissions on a file in octal form, which is useful for system configuration but not available in &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; and easy to bungle, use something like
&lt;code class=&quot;highlighter-rouge&quot;&gt;sh
    stat -c '%A %a %n' /etc/timezone
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For interactive selection of values from the output of another command, use &lt;a href=&quot;https://github.com/mooz/percol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;percol&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For interaction with files based on the output of another command (like &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;), use &lt;code class=&quot;highlighter-rouge&quot;&gt;fpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/facebook/PathPicker&quot;&gt;PathPicker&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:
&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m SimpleHTTPServer 7777&lt;/code&gt; (for port 7777 and Python 2).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;processing-files-and-data&quot;&gt;Processing files and data&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To locate a file by name in the current directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;find . -iname '*something*'&lt;/code&gt; (or similar). To find a file anywhere by name, use &lt;code class=&quot;highlighter-rouge&quot;&gt;locate something&lt;/code&gt; (but bear in mind &lt;code class=&quot;highlighter-rouge&quot;&gt;updatedb&lt;/code&gt; may not have indexed recently created files).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For general searching through source or data files (more advanced than &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -r&lt;/code&gt;), use &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ag&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To convert HTML to text: &lt;code class=&quot;highlighter-rouge&quot;&gt;lynx -dump -stdin&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Markdown, HTML, and all kinds of document conversion, try &lt;a href=&quot;http://pandoc.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you must handle XML, &lt;code class=&quot;highlighter-rouge&quot;&gt;xmlstarlet&lt;/code&gt; is old but good.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For JSON, use &lt;code class=&quot;highlighter-rouge&quot;&gt;jq&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Excel or CSV files, &lt;a href=&quot;https://github.com/onyxfish/csvkit&quot;&gt;csvkit&lt;/a&gt; provides &lt;code class=&quot;highlighter-rouge&quot;&gt;in2csv&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;csvcut&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;csvjoin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;csvgrep&lt;/code&gt;, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Amazon S3, &lt;a href=&quot;https://github.com/s3tools/s3cmd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3cmd&lt;/code&gt;&lt;/a&gt; is convenient and &lt;a href=&quot;https://github.com/bloomreach/s4cmd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s4cmd&lt;/code&gt;&lt;/a&gt; is faster. Amazon’s &lt;a href=&quot;https://github.com/aws/aws-cli&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aws&lt;/code&gt;&lt;/a&gt; is essential for other AWS-related tasks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know about &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;uniq&lt;/code&gt;, including uniq’s &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; options – see one-liners below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know about &lt;code class=&quot;highlighter-rouge&quot;&gt;cut&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;paste&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; to manipulate text files. Many people use &lt;code class=&quot;highlighter-rouge&quot;&gt;cut&lt;/code&gt; but forget about &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set &lt;code class=&quot;highlighter-rouge&quot;&gt;LANG&lt;/code&gt; or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run &lt;em&gt;many times&lt;/em&gt; slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using &lt;code class=&quot;highlighter-rouge&quot;&gt;export LC_ALL=C&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know basic &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt; for simple data munging. For example, summing all numbers in the third column of a text file: &lt;code class=&quot;highlighter-rouge&quot;&gt;awk '{ x += $3 } END { print x }'&lt;/code&gt;. This is probably 3X faster and 3X shorter than equivalent Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To replace all occurrences of a string in place, in one or more files:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;To rename many files at once according to a pattern, use &lt;code class=&quot;highlighter-rouge&quot;&gt;rename&lt;/code&gt;. For complex renames, &lt;a href=&quot;https://github.com/jlevy/repren&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repren&lt;/code&gt;&lt;/a&gt; may help.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      # Recover backup files foo.bak -&amp;gt; foo:
      rename 's/\.bak$//' *.bak
      # Full rename of filenames, directories, and contents foo -&amp;gt; bar:
      repren --full --preserve-case --from foo --to bar .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;shuf&lt;/code&gt; to shuffle or select random lines from a file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt;’s options. Know how keys work (&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt;). In particular, watch out that you need to write &lt;code class=&quot;highlighter-rouge&quot;&gt;-k1,1&lt;/code&gt; to sort by only the first field; &lt;code class=&quot;highlighter-rouge&quot;&gt;-k1&lt;/code&gt; means sort according to the whole line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stable sort (&lt;code class=&quot;highlighter-rouge&quot;&gt;sort -s&lt;/code&gt;) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sort -k1,1 | sort -s -k2,2&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press &lt;strong&gt;ctrl-v&lt;/strong&gt; &lt;strong&gt;[Tab]&lt;/strong&gt; or write &lt;code class=&quot;highlighter-rouge&quot;&gt;$'\t'&lt;/code&gt; (the latter is better as you can copy/paste it).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For binary files, use &lt;code class=&quot;highlighter-rouge&quot;&gt;hd&lt;/code&gt; for simple hex dumps and &lt;code class=&quot;highlighter-rouge&quot;&gt;bvi&lt;/code&gt; for binary editing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also for binary files, &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; (plus &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;, etc.) lets you find bits of text.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To convert text encodings, try &lt;code class=&quot;highlighter-rouge&quot;&gt;iconv&lt;/code&gt;. Or &lt;code class=&quot;highlighter-rouge&quot;&gt;uconv&lt;/code&gt; for more advanced use; it supports some advanced Unicode things. For example, this command lowercases and removes all accents (by expanding and dropping them):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &amp;gt;; ::Any-NFC; ' &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To split files into pieces, see &lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt; (to split by size) and &lt;code class=&quot;highlighter-rouge&quot;&gt;csplit&lt;/code&gt; (to split by a pattern).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;zless&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zmore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zcat&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;zgrep&lt;/code&gt; to operate on compressed files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;system-debugging&quot;&gt;System debugging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For web debugging, &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;curl -I&lt;/code&gt; are handy, or their &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; equivalents, or the more modern &lt;a href=&quot;https://github.com/jakubroztocil/httpie&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;httpie&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To know disk/cpu/network status, use &lt;code class=&quot;highlighter-rouge&quot;&gt;iostat&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;netstat&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; (or the better &lt;code class=&quot;highlighter-rouge&quot;&gt;htop&lt;/code&gt;), and (especially) &lt;code class=&quot;highlighter-rouge&quot;&gt;dstat&lt;/code&gt;. Good for getting a quick idea of what’s happening on a system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For a more in-depth system overview, use &lt;a href=&quot;https://github.com/nicolargo/glances&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;glances&lt;/code&gt;&lt;/a&gt;. It presents you with several system level statistics in one terminal window. Very helpful for quickly checking on various subsystems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To know memory status, run and understand the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vmstat&lt;/code&gt;. In particular, be aware the “cached” value is memory held by the Linux kernel as file cache, so effectively counts toward the “free” value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java system debugging is a different kettle of fish, but a simple trick on Oracle’s and some other JVMs is that you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -3 &amp;lt;pid&amp;gt;&lt;/code&gt; and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;mtr&lt;/code&gt; as a better traceroute, to identify network issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For looking at why a disk is full, &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdu&lt;/code&gt; saves time over the usual commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;du -sh *&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To find which socket or process is using bandwidth, try &lt;code class=&quot;highlighter-rouge&quot;&gt;iftop&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;nethogs&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ab&lt;/code&gt; tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try &lt;code class=&quot;highlighter-rouge&quot;&gt;siege&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For more serious network debugging, &lt;code class=&quot;highlighter-rouge&quot;&gt;wireshark&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;ngrep&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know about &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ltrace&lt;/code&gt;. These can be helpful if a program is failing, hanging, or crashing, and you don’t know why, or if you want to get a general idea of performance. Note the profiling option (&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;), and the ability to attach to a running process (&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know about &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; to check shared libraries etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know how to connect to a running process with &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; and get its stack traces.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;. It’s amazingly helpful sometimes when debugging live problems. Examples: &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/cpuinfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/xxx/cwd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/xxx/exe&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/xxx/fd/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/xxx/smaps&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When debugging why something went wrong in the past, &lt;code class=&quot;highlighter-rouge&quot;&gt;sar&lt;/code&gt; can be very helpful. It shows historic statistics on CPU, memory, network, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For deeper systems and performance analyses, look at &lt;code class=&quot;highlighter-rouge&quot;&gt;stap&lt;/code&gt; (&lt;a href=&quot;https://sourceware.org/systemtap/wiki&quot;&gt;SystemTap&lt;/a&gt;), &lt;a href=&quot;http://en.wikipedia.org/wiki/Perf_(Linux)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/draios/sysdig&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sysdig&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Confirm what Linux distribution you’re using (works on most distros): &lt;code class=&quot;highlighter-rouge&quot;&gt;lsb_release -a&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; whenever something’s acting really funny (it could be hardware or driver issues).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;one-liners&quot;&gt;One-liners&lt;/h2&gt;

&lt;p&gt;A few examples of piecing together commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;uniq&lt;/code&gt;. Suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt; option if &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; is on a small root partition.) See also the note about &lt;code class=&quot;highlighter-rouge&quot;&gt;LC_ALL&lt;/code&gt; above.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      cat a b | sort | uniq &amp;gt; c   # c is a union b
      cat a b | sort | uniq -d &amp;gt; c   # c is a intersect b
      cat a b b | sort | uniq -u &amp;gt; c   # c is set difference a - b
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      awk '{ x += $3 } END { print x }' myfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;If want to see sizes/dates on a tree of files, this is like a recursive &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; but is easier to read than &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lR&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      find . -type f -ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel&lt;/code&gt; whenever you can. Note you can control how many items execute per line (&lt;code class=&quot;highlighter-rouge&quot;&gt;-L&lt;/code&gt;) as well as parallelism (&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;). If you’re not sure if it’ll do the right thing, use xargs echo first. Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;-I{}&lt;/code&gt; is handy. Examples:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an &lt;code class=&quot;highlighter-rouge&quot;&gt;acct_id&lt;/code&gt; parameter that is present in the URL. If you want a tally of how many requests for each &lt;code class=&quot;highlighter-rouge&quot;&gt;acct_id&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run this function to get a random tip from this document (parses Markdown and extracts an item):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v &quot;(html/body/ul/li[count(p)&amp;gt;0])[$RANDOM mod last()+1]&quot; |
          xmlstarlet unesc | fmt -80
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;obscure-but-useful&quot;&gt;Obscure but useful&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;: perform arithmetic or boolean operations or evaluate regular expressions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m4&lt;/code&gt;: simple macro processor&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt;: powerful terminal multiplexing and session persistence&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yes&lt;/code&gt;: print a string a lot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cal&lt;/code&gt;: nice calendar&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt;: run a command (useful in scripts)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;look&lt;/code&gt;: find English words (or lines in a file) beginning with a string&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cut &lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;paste&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt;: data manipulation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fmt&lt;/code&gt;: format text paragraphs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pr&lt;/code&gt;: format text into pages/columns&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;: wrap lines of text&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt;: format text into columns or tables&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expand&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unexpand&lt;/code&gt;: convert between tabs and spaces&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nl&lt;/code&gt;: add line numbers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq&lt;/code&gt;: print numbers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bc&lt;/code&gt;: calculator&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;factor&lt;/code&gt;: factor integers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gpg&lt;/code&gt;: encrypt and sign files&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toe&lt;/code&gt;: table of terminfo entries&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt;: network debugging and data transfer&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrep&lt;/code&gt;: grep for the network layer&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;: moving data between files or devices&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;: identify type of a file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stat&lt;/code&gt;: file info&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tac&lt;/code&gt;: print files in reverse&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shuf&lt;/code&gt;: random selection of lines from a file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;comm&lt;/code&gt;: compare sorted files line by line&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bvi&lt;/code&gt;: dump or edit binary files&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt;: extract text from binary files&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tr&lt;/code&gt;: character translation or manipulation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iconv &lt;/code&gt;or uconv: conversion for text encodings&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;split &lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;csplit&lt;/code&gt;: splitting files&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;7z&lt;/code&gt;: high-ratio file compression&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt;: dynamic library info&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nm&lt;/code&gt;: symbols from object files&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ab&lt;/code&gt;: benchmarking web servers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;: system call debugging&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mtr&lt;/code&gt;: better traceroute for network debugging&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cssh&lt;/code&gt;: visual concurrent shell&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wireshark&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tshark&lt;/code&gt;: packet capture and network debugging&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;host&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt;: DNS lookups&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof&lt;/code&gt;: process file descriptor and socket info&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dstat&lt;/code&gt;: useful system stats&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/nicolargo/glances&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;glances&lt;/code&gt;&lt;/a&gt;: high level, multi-subsystem overview&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iostat&lt;/code&gt;: CPU and disk usage stats&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;htop&lt;/code&gt;: improved version of top&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt;: login history&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;: who’s logged on&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;: user/group identity info&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sar&lt;/code&gt;: historic system stats&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iftop&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;nethogs&lt;/code&gt;: network utilization by socket or process&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ss&lt;/code&gt;: socket statistics&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt;: boot and system error messages&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hdparm&lt;/code&gt;: SATA/ATA disk manipulation/performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsb_release&lt;/code&gt;: Linux distribution info&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lshw&lt;/code&gt;: hardware information&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fortune&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ddate&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sl&lt;/code&gt;: um, well, it depends on whether you consider steam locomotives and Zippy quotations “useful”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-resources&quot;&gt;More resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alebcay/awesome-shell&quot;&gt;awesome-shell&lt;/a&gt;: A curated list of shell tools and resources.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://redsymbol.net/articles/unofficial-bash-strict-mode/&quot;&gt;Strict mode&lt;/a&gt; for writing better shell scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you &lt;em&gt;can&lt;/em&gt; do something in Bash doesn’t necessarily mean you should! ;)&lt;/p&gt;

&lt;div class=&quot;share-page&quot;&gt;
&lt;h2 style=&quot;background:#faebd7;&quot;&gt;
    Share this on &amp;rarr; 
    &lt;a href=&quot;https://twitter.com/intent/tweet?text=The art of command line&amp;amp;url=http://yangjl.com/notes/2015/06/17/command-line&amp;amp;via=&amp;amp;related=&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;Twitter&lt;/a&gt;
    &lt;a href=&quot;https://facebook.com/sharer.php?u=http://yangjl.com/notes/2015/06/17/command-line&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Facebook&quot;&gt;Facebook&lt;/a&gt;
    &lt;a href=&quot;https://plus.google.com/share?url=http://yangjl.com/notes/2015/06/17/command-line&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Google+&quot;&gt;Google+&lt;/a&gt;
&lt;/h2&gt; 
&lt;style type=&quot;text/css&quot;&gt;
	.share-page {
    	text-align: center;
    	background: $secondary-color;
    	color: $light-color;
    	padding: 8px 15px;
    	border-radius: 5px;
    	margin: 1.5 * $spacing-unit 0;

    	h2 {
        	font-weight: 700;
        	color: #458b74;
        	margin-left: 10px;

        	&amp;:hover {
            	border-bottom: 1px dashed #458b74;
        	}
    	}
	}
&lt;/style&gt;	
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/notes/2015/06/17/command-line</link>
                <guid>http://yangjl.com/en/notes/2015/06/17/command-line</guid>
                <pubDate>2015-06-17T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>RNA-seq quantification comparison: K-mer vs. alignment approaches</title>
                <description>
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;RNA-seq short reads quantification, or simply, counting how many reads mapped to a set of genes, is the key step for differential expression analysis. Traditionally, reads were mapped to the reference genome and then were counted based on the mapping information. It normally takes days or weeks with multiple CPUs, just for the alignment. Recently, K-mer strategy was proposed as an alignment-free alternative, including &lt;a href=&quot;http://www.nature.com/nbt/journal/v32/n5/full/nbt.2862.html&quot;&gt;Sailfish&lt;/a&gt; and &lt;a href=&quot;http://arxiv.org/pdf/1505.02710v2.pdf&quot;&gt;kallisto&lt;/a&gt;. Strange names, are they?
Anyway, with no doubt, these K-mer approaches run much faster comparing to alignment-based approaches. See below figure stole from &lt;a href=&quot;http://www.cs.cmu.edu/~ckingsf/class/02-714/Lec05-sailfish.pdf&quot;&gt;Rob Patro’s presentation&lt;/a&gt;.
&lt;img src=&quot;http://i.imgur.com/YVhf5tz.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is K-mer? Simply speaking, K-mer is a string of length K. For instance, “ATCG” is 4-mer sequence. For a given sequence of length N, it will extract &lt;code class=&quot;highlighter-rouge&quot;&gt;N-k+1&lt;/code&gt; k-mers.
&lt;img src=&quot;http://i.imgur.com/GQyglzb.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The paradigm for a K-mer approach would be:&lt;br /&gt;
1. Build k-mer index of your target transcripts (e.g. your gene annotation).&lt;br /&gt;
2. Count k-mer in your RNA-seq reads.&lt;br /&gt;
3. Quantification.  &lt;/p&gt;

&lt;h1 id=&quot;setup-the-experiment&quot;&gt;Setup the experiment&lt;/h1&gt;
&lt;p&gt;To convince myself these approaches are as accurate as traditional ones, I setup an experiment to compare the results generated by both traditional alignment-based approach and K-mer approach. The analyzing codes were deposited in the github &lt;a href=&quot;https://github.com/yangjl/Demo&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, I downloaded some RNA-seq data from NCBI by using &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; and obtained the reference genome from &lt;a href=&quot;http://plants.ensembl.org/Oryza_indica/Info/Index&quot;&gt;EnsemblePlants&lt;/a&gt;. I used GSNAP for short reads alignment. And some bioconductor packages, including &lt;code class=&quot;highlighter-rouge&quot;&gt;GenomicFeatures&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GenomicAlignments&lt;/code&gt;, for read count quantification. The detailed procedure can be found &lt;a href=&quot;http://rpubs.com/yangjl0930/61344&quot;&gt;here for alignment&lt;/a&gt; and &lt;a href=&quot;http://rpubs.com/yangjl0930/60157&quot;&gt;here for quantification&lt;/a&gt;. Or a shorter version &lt;a href=&quot;http://rpubs.com/yangjl0930/63347&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### get RNA-seq reads
wget get ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/SRR117/SRR1174772/SRR1174772.sra
### get reference genome
wget ftp://ftp.ensemblgenomes.org/pub/plants/release-25/fasta/oryza_indica/dna/Oryza_indica.ASM465v1.25.dna.chromosome.*.fa.gz
### alignment with gmap
gmap_build -D largedata/OS_indica/ -d ASM465v1.25_gsnap -g Oryza_indica.ASM465v1.25.dna.chromosome*fa.gz &amp;gt; gmapbuild.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-kallisto-approach&quot;&gt;The kallisto approach&lt;/h1&gt;
&lt;p&gt;I used a recently released K-mer approach &lt;a href=&quot;http://pachterlab.github.io/kallisto/&quot;&gt;kallisto&lt;/a&gt;. It is on github and are well documented. The whole procedure takes only two steps for both single-end and paired-end sequencing as below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### indexing
kallisto index -k 31 -i Osativa_204_v7_1transcript Osativa_204_v7.0.transcript_primaryTranscriptOnly
### quantification
kallisto quant -i index -o output pairA_1.fastq pairA_2.fastq pairB_1.fastq pairB_2.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;# Comparing of the results&lt;/p&gt;

&lt;p&gt;The Pearson’s correlation coefficient (r) ranged from 0.8 to 0.94. That is an impressive correlation, indicating the &lt;code class=&quot;highlighter-rouge&quot;&gt;kallisto&lt;/code&gt; is indeed as accurate as alignment-based approach. I looked into the outliers on the left sides of the plots and found those dots were from genes with repeat sequences. Note that with the alignment-based approach, I kept only uniquely mapped reads for quantification purpose. After removing these several outlier genes, the correlations become more significant.&lt;/p&gt;

&lt;p&gt;Overall, I think &lt;code class=&quot;highlighter-rouge&quot;&gt;kallisto&lt;/code&gt; is a simple and rapid RNA-seq quantification alternative for alignment-based approach. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;kallisto&lt;/code&gt; may over-estimate the read counts from genes containing repeats. For differential expression analysis, this may not be a critical problem since the over-estimation will not be biased.  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/UVU28KJ.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;share-page&quot;&gt;
&lt;h2 style=&quot;background:#faebd7;&quot;&gt;
    Share this on &amp;rarr; 
    &lt;a href=&quot;https://twitter.com/intent/tweet?text=RNA-seq quantification comparison: K-mer vs. alignment approaches&amp;amp;url=http://yangjl.com/tech%20report/2015/06/03/rna-seq&amp;amp;via=&amp;amp;related=&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;Twitter&lt;/a&gt;
    &lt;a href=&quot;https://facebook.com/sharer.php?u=http://yangjl.com/tech%20report/2015/06/03/rna-seq&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Facebook&quot;&gt;Facebook&lt;/a&gt;
    &lt;a href=&quot;https://plus.google.com/share?url=http://yangjl.com/tech%20report/2015/06/03/rna-seq&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Share on Google+&quot;&gt;Google+&lt;/a&gt;
&lt;/h2&gt; 
&lt;style type=&quot;text/css&quot;&gt;
	.share-page {
    	text-align: center;
    	background: $secondary-color;
    	color: $light-color;
    	padding: 8px 15px;
    	border-radius: 5px;
    	margin: 1.5 * $spacing-unit 0;

    	h2 {
        	font-weight: 700;
        	color: #458b74;
        	margin-left: 10px;

        	&amp;:hover {
            	border-bottom: 1px dashed #458b74;
        	}
    	}
	}
&lt;/style&gt;	
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/tech%20report/2015/06/03/rna-seq</link>
                <guid>http://yangjl.com/en/tech%20report/2015/06/03/rna-seq</guid>
                <pubDate>2015-06-03T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Compression related commands</title>
                <description>
&lt;h2 id=&quot;how-to-extract-targz-file&quot;&gt;How to extract tar.gz file&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -zxvf file.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;where, &lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt; works on gzip compression automatically when reading archives; &lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt;, extract archives; &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; produce verbose output; &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; read the archive from the archive to the specififed file.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-the-first-few-lines-from-the-gz-file&quot;&gt;How to get the first few lines from the *.gz file.&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gzip -cd *.gz | head -n 30
## gzip in a loop
for i in *.gz; do gzip -dk $i; done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;, extraction and &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;, keep the original file.&lt;/p&gt;
</description>
                <link>http://yangjl.com/en/codes/2015/05/27/zip</link>
                <guid>http://yangjl.com/en/codes/2015/05/27/zip</guid>
                <pubDate>2015-05-27T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Notes on learning ANGSD</title>
                <description>
&lt;p&gt;The biggest advantages of &lt;a href=&quot;http://popgen.dk/wiki/index.php/ANGSD&quot;&gt;ANGSD&lt;/a&gt; as they claimed are “&lt;em&gt;Most methods take genotype uncertainty into account instead of basing the analysis on called genotypes. This is especially useful for low and medium depth data&lt;/em&gt;”. The software was forked to my own &lt;a href=&quot;https://github.com/yangjl/angsd&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;install-from-github&quot;&gt;Install from Github&lt;/h1&gt;
&lt;p&gt;You also need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;CRAM&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;htslib&lt;/code&gt;, although I have no idea what CRAM is, I believe it might be something more fast or a space saving format (like SAM?). I have to say the installation become so easy with github!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/samtools/htslib.git  
git clone git://github.com/ANGSD/angsd.git   
cd angsd  
make  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;preparation-for-bam-input&quot;&gt;Preparation for BAM input&lt;/h1&gt;

&lt;p&gt;The following codes all following ANGSD’s tutorial. &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### download data
wget http://popgen.dk/software/download/angsd/bams.tar.gz
tar xf bams.tar.gz
### indexing them
for i in bams/*.bam;do samtools index $i;done
### create a list
ls bams/*.bam &amp;gt; bam.filelist
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;snp-and-genotype-calling&quot;&gt;SNP and genotype calling&lt;/h1&gt;

&lt;p&gt;SNPs are called based on their allele frequencies by &lt;code class=&quot;highlighter-rouge&quot;&gt;-doMaf&lt;/code&gt;. Basically, they will call a SNP if a site has a minor allele frequency significantly different from 0. (Note: how about really minor allele?)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### MAF for every basepair
angsd -bam bam.filelist -doMajorMinor 2 -doMaf 8  -doCounts 1 -out out
 
### SNP calling
angsd -bam bam.filelist -GL 1 -out outfile -doMaf 2 -SNP_pval 1e-6 -doMajorMinor 1

### Genotype Likelihoods
angsd -bam bam.filelist -GL 1 -doGlf 2 -doMajorMinor 1 -doMaf 2 -SNP_pval 2e-6 -out genolike -nThreads 10

### Genotype calling in one step
angsd -bam bam.filelist -GL 2 -out gatk_outfile -doMaf 2 -doMajorMinor 1 -SNP_pval 1e-6 -doGeno 5 -doPost 1 -postCutoff 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;with option &lt;code class=&quot;highlighter-rouge&quot;&gt;-doPlink 1&lt;/code&gt;, it will output PLINK format. &lt;/p&gt;

&lt;h1 id=&quot;population-genetics&quot;&gt;Population Genetics&lt;/h1&gt;
</description>
                <link>http://yangjl.com/en/notes/2015/05/27/angsd</link>
                <guid>http://yangjl.com/en/notes/2015/05/27/angsd</guid>
                <pubDate>2015-05-27T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Reading List</title>
                <description>
&lt;h3 id=&quot;python-and-statistics-books&quot;&gt;Python and statistics books&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://work.thaslwanter.at/Stats/html/index.html&quot;&gt;Introduction to statistics 6.4 in python&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/&quot;&gt;Probabilistic Programming and Bayesian Methods for Hackers&lt;/a&gt;: an introduction to Bayesian methods and probabilistic progamming from a computation/understanding-first, mathematics-second point of view.&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://yangjl.com/en/notes/2015/05/11/reading-list</link>
                <guid>http://yangjl.com/en/notes/2015/05/11/reading-list</guid>
                <pubDate>2015-05-11T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>LaTex citation undefined</title>
                <description>
&lt;h3 id=&quot;latex-citation-error-for-plos-1&quot;&gt;LaTex citation error for PLOS 1&lt;/h3&gt;

&lt;p&gt;If you got the following error message:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
LaTex Warning: Citation on page undefined
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Just simply run latex twice, the first time, it will generate *.aux. The next time, bibtex will look for *.aux.&lt;/p&gt;

&lt;h3 id=&quot;latax-track-chanages&quot;&gt;LaTax track chanages&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;latexdiff old.tex new.tex &amp;gt; track.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;diff-through-git&quot;&gt;diff through git&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff --word-diff=color commit1 commit2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
                <link>http://yangjl.com/en/notes/2015/05/10/latex</link>
                <guid>http://yangjl.com/en/notes/2015/05/10/latex</guid>
                <pubDate>2015-05-10T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>TASSEL GBS HDF5 format</title>
                <description>
&lt;h3 id=&quot;hdf5-overview&quot;&gt;HDF5 Overview&lt;/h3&gt;

&lt;p&gt;HDF5 data file has hierarchical organization consisting of the groups and dataset. Groups can contain other groups and datasets, datasets contain complex multi-dimensional data. The organization looks similar to the regular UNIX file system, groups are analogous to directories, and datasets contain arbitrary data like regular files. Like directories, groups name the objects contained in them. This allows easy navigation from the “top” of the file to any object in that file, something like /groupA/groupB/dataset1.&lt;/p&gt;

&lt;p&gt;Datasets in HDF5 file have defined element type and layout. Layout determines the dimensionality of the data and the size of each dimension (shape of the dataset). Special case of a layout called scalar which means that dataset contains exactly one element of the given type. More common layouts are multidimensional layouts. Element type describes the structure of the basic element of these multidimensional arrays or scalars. Type can be atomic, compound, or array. Atomic types include usual numeric types such as integer, floating, etc. Compound type is a collection of atomic types or other compound types, very much like structures in programming languages. Array type for elements means that each dataset element is itself an array. One has to remember that all elements of a dataset have the same type and structure, e.g. if element type is an array then all elements have to have exactly the same dimensions.&lt;/p&gt;

&lt;p&gt;Groups and datasets in HDF5 could have a number of attributes attached to them which can be used to store some meta-information about the group or dataset as a whole. Each attribute has a name and associated value which usually hase some basic type - integer, float, string, etc. Attributes could be used for example to store begin/end time of the run or the run number.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://confluence.slac.stanford.edu/display/PSDM/How+to+access+HDF5+data+from+Python&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://yangjl.com/en/notes/2015/04/15/hdf5</link>
                <guid>http://yangjl.com/en/notes/2015/04/15/hdf5</guid>
                <pubDate>2015-04-15T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Retrieving large SRA files from NCBI using Aspera</title>
                <description>
&lt;p&gt;NCBI has started using 3rd party commercial software to improve SRA data transferring speeds &lt;strong&gt;Aspera&lt;/strong&gt;. The download rate can reach to hundreds MB/s.  &lt;/p&gt;

&lt;p&gt;Here is how to use it in Linux:&lt;/p&gt;

&lt;h3 id=&quot;download-it&quot;&gt;1. Download it:&lt;/h3&gt;
&lt;p&gt;There are multiple different stuff there &lt;a href=&quot;http://downloads.asperasoft.com/downloads&quot;&gt;http://downloads.asperasoft.com/downloads&lt;/a&gt;. You should download this one for Linux system: &lt;a href=&quot;http://downloads.asperasoft.com/en/downloads/8?list&quot;&gt;Aspera connect&lt;/a&gt;, high-performance transfer browser plug-in.&lt;/p&gt;

&lt;h3 id=&quot;install-it&quot;&gt;2. Install it:&lt;/h3&gt;
&lt;p&gt;It is super simple for installation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ascp -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh -QT -l 100m anonftp@ftp-private.ncbi.nlm.nih.gov:/1GB ~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The command line utility called &lt;strong&gt;ascp&lt;/strong&gt;, which is installed in
&lt;code class=&quot;highlighter-rouge&quot;&gt;
$HOME/.aspera/connect
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-it&quot;&gt;3. Use it:&lt;/h3&gt;
&lt;p&gt;You can test it by downloading the &lt;em&gt;1GB&lt;/em&gt; file. Note that the public key file should point to &lt;em&gt;.openssh&lt;/em&gt; rather than &lt;em&gt;.putty&lt;/em&gt;, which was suggested by &lt;a href=&quot;http://wiki.bioinformatics.ucdavis.edu/index.php/Aspera_upload/download_to_NCBI&quot;&gt;others&lt;/a&gt;. &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ascp -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh -QT -l 100m anonftp@ftp-private.ncbi.nlm.nih.gov:/1GB ~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/notes/2015/04/09/aspera</link>
                <guid>http://yangjl.com/en/notes/2015/04/09/aspera</guid>
                <pubDate>2015-04-09T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Git version control between laptop and linux server</title>
                <description>
&lt;p&gt;I have a Mac laptop with multiple git-repositories. But my computational works are mostly carried out on a linux server. From/To there I push and pull changes via SSH. I would like to sync codes and data analysis results between the two systems. Here is what I learned from others experience via a post from &lt;a href=&quot;http://stackoverflow.com/questions/4948190/git-repository-sync-between-computers-when-moving-around&quot;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below, I modified a little bit from above post. Lets say my netbook is called “Macbook”. I create a repository there&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/git
$ mkdir newThing
$ cd newThing
$ git init --bare
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the Linux server I will then create a clone of it. Maybe I will add some files also&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone username@0.0.0.1:/home/username/git/newThing
$ git add .
$ git commit -m &quot;Initial&quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On my Mac, I will also add the Linux address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote add externalName username@address:/home/username/git/newThing
$ git pull externalName master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Something to read: &lt;a href=&quot;http://progit.org/&quot;&gt;http://progit.org/&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://yangjl.com/en/notes/2015/04/08/sync-git</link>
                <guid>http://yangjl.com/en/notes/2015/04/08/sync-git</guid>
                <pubDate>2015-04-08T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Attending #PAGXXIII at home</title>
                <description>
&lt;p&gt;I missed #PAG meetings (International Plant &amp;amp; Animal Genome Conference) two years in a row partly because of my newborn. Thanks to the social media such as &lt;a href=&quot;https://twitter.com/&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;github.com&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;Slideshare&lt;/a&gt;, which keep people like me updated about the excitements (mainly biotech progresses) in San Diego. Here, I extracted some information from the web regarding #PAGXXIII and tried to digest the meeting info a little bit at home.  &lt;/p&gt;

&lt;p&gt;All the tweets with the dash tag #PAGXXIII were obtained every day during the meeting and were achieved in this Github repo &lt;a href=&quot;https://github.com/yangjl/MeetingTweets&quot;&gt;MeetingTweets&lt;/a&gt;. It also includes the tweets from last year’s meeting. Most of this code was adapted from &lt;a href=&quot;http://gettinggeneticsdone.blogspot.com/search/label/Twitter&quot;&gt;Stephen Turner&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# Meeting slides and notes&lt;/p&gt;

&lt;h2 id=&quot;meeting-notes&quot;&gt;Meeting Notes&lt;/h2&gt;
&lt;p&gt;Great PAG notes from @mclafave: &lt;a href=&quot;https://github.com/mlafave/meeting_notes/blob/master/PAG_XXIII_2015.txt&quot;&gt;see here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PAG keynote slides: &lt;a href=&quot;http://t.co/v86FA2TSw8&quot;&gt;the NIH as a Digital Enterpreise&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tomato genome SL2.50 and Beyond @SahaSurya &lt;a href=&quot;http://t.co/vR36JlIwKT&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.faang.org/pub/GiuffraE_PAG2015_FAANG.pdf&quot;&gt;FAANG talk&lt;/a&gt; @faangomics&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://t.co/mtQQ5eZhCK&quot;&gt;Facilitating the use of NGS data for data-driven biology&lt;/a&gt; @drbonohu&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pag-tweeters-to-follow&quot;&gt;PAG tweeters to follow&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yY0Tfye.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# DAY ONE (2015-1-10)
I lost day one’s data.&lt;/p&gt;

&lt;h1 id=&quot;day-two-2015-1-11&quot;&gt;DAY TWO (2015-1-11)&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;‘wordcloud’&lt;/strong&gt; of day one says that “Ancient dna sequencing data can assembly, need to see booth now”. Really?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7B6rzAU.png?1&quot; alt=&quot;Imgur1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-three-2015-1-12&quot;&gt;DAY THREE (2015-1-12)&lt;/h1&gt;

&lt;p&gt;“Brown bear genome data, great!”
&lt;img src=&quot;http://i.imgur.com/0EWZrRb.png&quot; alt=&quot;Imgur2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-four-2015-1-13&quot;&gt;DAY FOUR (2015-1-13)&lt;/h1&gt;

&lt;p&gt;Feature of the day “Assembly”!
&lt;img src=&quot;http://i.imgur.com/o5cedhm.png&quot; alt=&quot;Imgur3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Twitters of the day.
&lt;img src=&quot;http://i.imgur.com/iGvmHIU.png&quot; alt=&quot;Imgur4&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://yangjl.com/en/notes/2015/01/12/pag2015</link>
                <guid>http://yangjl.com/en/notes/2015/01/12/pag2015</guid>
                <pubDate>2015-01-12T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Changing bash to zsh</title>
                <description>
&lt;h1 id=&quot;why-i-change-from-bash-to-zsh&quot;&gt;Why I change from &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/jaguardesignstudio/why-zsh-is-cooler-than-your-shell-16194692&quot;&gt;zsh is cooler than bash&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;oh-my-zsh&quot;&gt;Oh-my-zsh&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;cheat-sheat&quot;&gt;Cheat sheat&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bash2zsh.com/zsh_refcard/refcard.pdf&quot;&gt;Refcard&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://yangjl.com/en/codes/2015/01/01/bash-to-zsh</link>
                <guid>http://yangjl.com/en/codes/2015/01/01/bash-to-zsh</guid>
                <pubDate>2015-01-01T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Python: meaning of __init__ and __main__</title>
                <description>
&lt;h3 id=&quot;what-does-if-name--main-do&quot;&gt;What does &lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == “__main__” do&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the Python interpreter reads a source file, it executes all of the code found in it. Before executing the code, it will define a few special variables. For example, if the python interpreter is running that module (the source file) as the main program, it sets the special &lt;strong&gt;name&lt;/strong&gt; variable to have a value “&lt;strong&gt;main&lt;/strong&gt;”. If this file is being imported from another module, &lt;strong&gt;name&lt;/strong&gt; will be set to the module’s name.
In the case of your script, let’s assume that it’s executing as the main function, e.g. you said something like&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;python threading_example.py&lt;/code&gt;&lt;br /&gt;
on the command line. After setting up the special variables, it will execute the import statement and load those modules. It will then evaluate the def block, creating a function object and creating a variable called myfunction that points to the function object. It will then read the if statement and see that &lt;strong&gt;name&lt;/strong&gt; does equal “&lt;strong&gt;main&lt;/strong&gt;”, so it will execute the block shown there.&lt;/p&gt;

&lt;p&gt;One of the reasons for doing this is that sometimes you write a module (a .py file) where it can be executed directly. Alternatively, it can also be imported and used in another module. By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.&lt;/p&gt;

&lt;h3 id=&quot;what-is-initpy-forhttpstackoverflowcomquestions448271what-is-init-py-for&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/questions/448271/what-is-init-py-for&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; for?&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Files name &lt;strong&gt;init&lt;/strong&gt;.py are used to mark directories on disk as Python package directories. If you have the files&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mydir/spam/__init__.py   
mydir/spam/module.py  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And mydir is on your path, you can import the code in module.py as  &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import spam.module  
or  
from spam import module  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you remove the &lt;strong&gt;init&lt;/strong&gt;.py file, Python will no longer look for submodules inside that directory, so attempts to import the module will fail.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;init&lt;/strong&gt;.py file is usually empty, but can be used to export selected portions of the package under more convenient name, hold convenience functions, etc. Given the example above, the contents of the init module can be accessed as&lt;/p&gt;

</description>
                <link>http://yangjl.com/en/codes/2014/12/16/Python-init-name</link>
                <guid>http://yangjl.com/en/codes/2014/12/16/Python-init-name</guid>
                <pubDate>2014-12-16T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>R equivalent functions in Pandas</title>
                <description>
&lt;p&gt;Pandas &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;direct-link-to-some-useful-functions&quot;&gt;Direct link to some useful functions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Group by: &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/groupby.html?highlight=aggregate&quot;&gt;split-apply-combine&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;Comparison with &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/dev/comparison_with_r.html&quot;&gt;R/R libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;readtable&quot;&gt;read.table&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snpibd = pd.read_table(&quot;largedata/IBD/allsnps_11m_IBD.bed&quot;, sep=&quot;\t&quot;, header= None)
gerp = pd.read_csv(&quot;largedata/SNP/allsnps_11m_gerpv2_tidy.csv&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;replace--gsub&quot;&gt;replace = gsub&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snpibd[3].replace(&quot;chr&quot;, &quot;&quot;, regex=True, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;paste&quot;&gt;paste&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snpibd['snpid'] = snpibd[3].map(str) + &quot;_&quot; + snpibd[2].map(str)
snpibd['ibdid'] = snpibd[3].map(str) + &quot;_&quot; + snpibd[4].map(str)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;merge&quot;&gt;merge&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snp11mgp = pd.merge(gerp130m[[&quot;snpid&quot;, &quot;N&quot;, &quot;RS&quot;]], snp11m, on='snpid', sort=False, how='right')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;writecsv&quot;&gt;write.csv&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snp11mgp.to_csv(&quot;largedata/SNP/allsnps_11m_gerpv2.csv&quot;, index=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/codes/2014/12/15/Pandas</link>
                <guid>http://yangjl.com/en/codes/2014/12/15/Pandas</guid>
                <pubDate>2014-12-15T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>R package Data.Table Usage Notes</title>
                <description>
&lt;p&gt;Most of those were learned from Kate Crosby’s &lt;a href=&quot;https://github.com/kate-crosby/datatable_slides&quot;&gt;short tutorial&lt;/a&gt; in &lt;a href=&quot;http://www.rilab.org/&quot;&gt;RIL lab&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;read-in-dataframe-rapidly-with-fread&quot;&gt;Read in data.frame rapidly with &lt;strong&gt;fread&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## tab delimited file
data &amp;lt;- fread(&quot;yourfile.txt&quot;, sep=&quot;\t&quot;)
## csv file
data &amp;lt;- fread(&quot;yourfile.csv&quot;, sep=&quot;,&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;subsetting-dt&quot;&gt;Subsetting dt&lt;/h2&gt;
&lt;p&gt;### := NULL&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub &amp;lt;- data[, c(&quot;chr&quot;, &quot;pos&quot;) := NULL]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;### use function of &lt;strong&gt;subset&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
sub &amp;lt;- subset(fulldata, select = c(&quot;chr&quot;, &quot;pos&quot;))
&lt;/code&gt;
### .SD = “Subset of Data.table”
Select the 2nd row (SNP) for/of each chromosome!
&lt;code class=&quot;highlighter-rouge&quot;&gt;
dt &amp;lt;- dt[, .SD[2], by=chrom]
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;order-data-really-quickly-with-setkey&quot;&gt;Order data really quickly with setkey()&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Here in chr and then pos
order.dt &amp;lt;- setkey(dt, &quot;chr&quot;, &quot;pos&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;more-information&quot;&gt;More information&lt;/h2&gt;

</description>
                <link>http://yangjl.com/en/codes/2014/12/12/DataTable</link>
                <guid>http://yangjl.com/en/codes/2014/12/12/DataTable</guid>
                <pubDate>2014-12-12T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Usage of IRanges/GenomicRanges Bioconductor packages</title>
                <description>
&lt;p&gt;&lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.pdf&quot;&gt;&lt;strong&gt;introduction&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bioconductor.org/help/course-materials/2013/SeattleFeb2013/IntermediateSequenceAnalysis2013.pdf&quot;&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pgfe.umassmed.edu/ou/archives/3122&quot;&gt;&lt;strong&gt;website&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;transform-granges-to-dataframe&quot;&gt;Transform &lt;strong&gt;GRanges&lt;/strong&gt; to &lt;strong&gt;Data.Frame&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cnvdf &amp;lt;- data.frame(chr=as.character(seqnames(mycnv)), start=start(mycnv), end=end(mycnv))
callcnv &amp;lt;- mcols(mycnv)
cnvdf &amp;lt;- cbind(cnvdf, callcnv)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
                <link>http://yangjl.com/en/codes/2014/12/11/IRanges</link>
                <guid>http://yangjl.com/en/codes/2014/12/11/IRanges</guid>
                <pubDate>2014-12-11T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Bedtools Usage Notes</title>
                <description>
&lt;p&gt;&lt;a href=&quot;http://bedtools.readthedocs.org/en/latest/index.html&quot;&gt;&lt;strong&gt;Bedtools&lt;/strong&gt;&lt;/a&gt; contain several handy utilities for genomic data analysis, especially useful for feature intersection analysis by using the function &lt;strong&gt;intersect&lt;/strong&gt;. I like bedtools because of the simple &lt;strong&gt;BED&lt;/strong&gt; format and speed of their algorithm. Below listed some of my personal usage examples for your reference.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## BED and other formats&lt;/p&gt;

&lt;h3 id=&quot;bed-formathttpbedtoolsreadthedocsorgenlatestcontentgeneral-usagehtml&quot;&gt;BED &lt;a href=&quot;http://bedtools.readthedocs.org/en/latest/content/general-usage.html&quot;&gt;format&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;BED3: A BED file where each feature is described by &lt;em&gt;chrom&lt;/em&gt;, &lt;em&gt;start&lt;/em&gt;, and &lt;em&gt;end&lt;/em&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;For example: chr1 110 120  
Note: start is zero-based, where the first base in a chr is numbered 0. And the end is one-based. For example, a SNP at 10 should be coded as start=9, end=10.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;BED4: &lt;em&gt;chrom&lt;/em&gt;, &lt;em&gt;start&lt;/em&gt;, &lt;em&gt;end&lt;/em&gt; and &lt;em&gt;name&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-genomic-data-format-can-be-found-from-ucsc-genome-browser-websitehttpgenomeucscedufaqfaqformatformat1&quot;&gt;Other genomic data format can be found from UCSC Genome Browser &lt;a href=&quot;http://genome.ucsc.edu/FAQ/FAQformat#format1&quot;&gt;website&lt;/a&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;## Find SNPs in window, report SNPs and the windows they belong to.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bedtools intersect -a window.bed -b SNP.bed -wb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;More details see here: &lt;a href=&quot;http://bedtools.readthedocs.org/en/latest/content/tools/intersect.html&quot;&gt;&lt;strong&gt;intersect&lt;/strong&gt;&lt;/a&gt;  &lt;br /&gt;
* &lt;strong&gt;-a:&lt;/strong&gt; window of bed format&lt;br /&gt;
* &lt;strong&gt;-b:&lt;/strong&gt; SNPs of bed format&lt;br /&gt;
* &lt;strong&gt;-wb:&lt;/strong&gt; write the original entry in B for each overlap  &lt;/p&gt;

</description>
                <link>http://yangjl.com/en/codes/2014/12/10/bedtools-practice</link>
                <guid>http://yangjl.com/en/codes/2014/12/10/bedtools-practice</guid>
                <pubDate>2014-12-10T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Using Rmarkdown and Github for Reproducible Research</title>
                <description>
&lt;p&gt;Broadly speaking, reproducible research aims to generate and report data analyses and scientific claims in a reproducible manner. Or simply, by one click, others could re-generate the results you reported and the report itself. From my personal experience of several years of quantitative genetics research, the broad definition of reproducible research is too ambitious. In a real world study, normally we will spend many days, weeks or even years for data tweaking and hammering. In these processes, many versions of intermediate data will be generated, many parameters for model fitting were tried, and many figures were plotted and changed later. It is such a pain to reproduce a research even conducted by yourself, who normally carried out multiple research projects across years. Do not mention to share with others.&lt;/p&gt;

&lt;p&gt;Modern data analyses rely on tools. Thanks for the powerful R IDE: &lt;a href=&quot;http://www.rstudio.com/&quot;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt; and version control tool: &lt;a href=&quot;https://github.com/&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, which largely make this idea of reproducible research feasible. After a workshop in &lt;a href=&quot;http://www.rilab.org/&quot;&gt;&lt;strong&gt;RILAB&lt;/strong&gt;&lt;/a&gt;, some of my colleagues show their interests in my workflow of project management and documentation, although it is far from completely reproducible. It encouraged me to blog it and share some of the tools that might be helpful for others. Here is the workflow I used.  &lt;/p&gt;

&lt;h2 id=&quot;setup-project&quot;&gt;Setup project&lt;/h2&gt;
&lt;p&gt;The right corner icon of &lt;strong&gt;RStudio&lt;/strong&gt; will enable you to manage your &lt;em&gt;New Project&lt;/em&gt;.    &lt;br /&gt;
I normally start a project with &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#install.packages('ProjectTemplate')
library('ProjectTemplate')
create.project('temp')
system(&quot;mv temp/* .&quot;)
system(&quot;rm -r temp/&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;using &lt;strong&gt;GitHub&lt;/strong&gt; to do the version control&lt;/li&gt;
  &lt;li&gt;using &lt;strong&gt;packrat&lt;/strong&gt; to do the R package dependency management&lt;/li&gt;
  &lt;li&gt;using &lt;strong&gt;ProjectTemplate&lt;/strong&gt; to layout working directories  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://yangjl.com/en/reproducible/2014/11/20/work-flow</link>
                <guid>http://yangjl.com/en/reproducible/2014/11/20/work-flow</guid>
                <pubDate>2014-11-20T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>A show case of using Rmarkdown and Github for reproducible research</title>
                <description>
&lt;h1 id=&quot;markdown&quot;&gt;Markdown&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; is a simple, easy-to-read, easy-to-write plain text format. The syntax of markdown could be printed in less than one page.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Heading
 =======
 
 Sub-heading
 -----------
 
 ### Another deeper heading
 
 Paragraphs are separated
 by a blank line.
 
 Let 2 spaces at the end of a line to do a  
 line break
 
 Text attributes *italic*,
 **bold**, `monospace`,~~monospace~~, `monospace` .
 
 A [link](http://example.com).
 
 Shopping list:
 
   * apples
   * oranges
   * pears
 
 Numbered list:
 
   1. apples
   2. oranges
   3. pears
 
 The rain---not the reign---in
 Spain.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;heading&quot;&gt;Heading&lt;/h1&gt;

&lt;h2 id=&quot;sub-heading&quot;&gt;Sub-heading&lt;/h2&gt;

&lt;h3 id=&quot;another-deeper-heading&quot;&gt;Another deeper heading&lt;/h3&gt;

&lt;p&gt;Paragraphs are separated
by a blank line.&lt;/p&gt;

&lt;p&gt;Let 2 spaces at the end of a line to do a&lt;br /&gt;
line break&lt;/p&gt;

&lt;p&gt;Text attributes &lt;em&gt;italic&lt;/em&gt;,
&lt;strong&gt;bold&lt;/strong&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt;,~~monospace~~, &lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://example.com&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shopping list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apples&lt;/li&gt;
  &lt;li&gt;oranges&lt;/li&gt;
  &lt;li&gt;pears&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Numbered list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;apples&lt;/li&gt;
  &lt;li&gt;oranges&lt;/li&gt;
  &lt;li&gt;pears&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rain—not the reign—in
 Spain.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is an example of a draft. Read more here: &lt;a href=&quot;http://jekyllrb.com/docs/drafts/&quot;&gt;http://jekyllrb.com/docs/drafts/&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://yangjl.com/en/reproducible/2014/11/05/reproducible-research-copy</link>
                <guid>http://yangjl.com/en/reproducible/2014/11/05/reproducible-research copy</guid>
                <pubDate>2014-11-05T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Journal Club（2）</title>
                <description>
&lt;p&gt;This nature’s cover story “THE GREEN HOURGLASS” was really an exciting paper. I regret to not be able to fully capture it two years ago. &lt;/p&gt;

&lt;p&gt;The authors adapted the embryonic hourclass model proposed from vertebrates (as the figure show below) to plants, and provided the transcriptomic evidence from two complementary analyses. What is the embryonic hourclass? It refers to embryos from various taxa appear different in early stages, and converge to a similar form during mid-embryogenesis (or called phylotypic stage), and again diverge in later stages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eRwvfhO.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recent analyses using zebrafish and &lt;em&gt;Drosophila&lt;/em&gt; demonstrated the transcriptome was dominated by ancient genes. Here in this paper, the authors calculated two different transcriptome indices: transcriptome age index (TAI) and transcriptome divergence index (TDI). The indices were computed across seven embryo stages. After visualization of the indices, clear hourclass patterns (see figure below from the paper) were found for both measurements.  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/BqI4EiL.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we can learn from this study are that (1) try to answer historical or classical biological questions with modern resources and (2) use open data to do it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Quint, M., Drost, H.-G., Gabel, A., Ullrich, K. K., Bönn, M., &amp;amp; Grosse, I. (2012). A transcriptomic hourglass in plant embryogenesis. Nature, 490(7418), 98–101. doi:10.1038/nature11394
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#### &lt;i class=&quot;icon-folder-open&quot;&gt;&lt;/i&gt;&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pubmed/22951968&quot;&gt;reference link:&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://yangjl.com/en/journal%20club/2014/04/09/Journal-Club-2</link>
                <guid>http://yangjl.com/en/journal%20club/2014/04/09/Journal-Club-2</guid>
                <pubDate>2014-04-09T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>NGS data of Maize</title>
                <description>
&lt;p&gt;We are now in the Big Data era, where “the data scientist will become the most sexy job in the world” said by &lt;a href=&quot;http://www.nytimes.com/2013/04/14/education/edlife/universities-offer-courses-in-a-hot-new-field-data-science.html?pagewanted=all&amp;amp;_r=0&quot;&gt;NYT&lt;/a&gt;. And the IT world frequently mentioned “90% of the data in the world today has been created in the last two years alone”. It seems like a strong wave of data explosion is coming!&lt;/p&gt;

&lt;p&gt;Amazing! However, I feel like we have nothing to do with it until recently when I checked the NCBI SRA database for a talk. I found that, we, the maize community, are right in the midst of the Big Data explosion. According to the database report, while after doing some accessions lookup, in the past several years, especially the last two years, about 13,000 Giga base-pairs were deposited from the maize community. That is about 6,500 depth of coverage of the maize genome if roughly assuming the maize genome is 2 Giba bases in size. This estimation not includes the on-going projects and non-submitted datasets. More importantly, this is happening just five years after the accomplishment of the maize B73 reference genome project. If we review the complete datasets in the SRA database, maize NGS data actually only accounted for &amp;lt; 0.1%. Until the end of Feb. 2014, more than 2,300 Tera bases reside there. The “90% &lt;strong&gt;genome sequencing data&lt;/strong&gt; were generated in the past two years alone”. See, IT’s data theory could be perfectly aligned to the sequencing industry (see the figure below).  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Mb5Z1Yi.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the data explosion, NGS data’s storage, sharing and publishing become a worldwide challenge. To overcome it, ~150 academic institutions and private companies went together to join the &lt;a href=&quot;http://genomicsandhealth.org/&quot;&gt;Global Alliance for Genomics and Health&lt;/a&gt;. While, &lt;a href=&quot;http://googleresearch.blogspot.co.uk/2014/02/google-joins-global-alliance-for.html&quot;&gt;Google Genomics&lt;/a&gt; is one of them. As the joining of some IT tycoons, &lt;strong&gt;genomics&lt;/strong&gt; now become a multi-disciplinary challenge. &lt;strong&gt;Genomics&lt;/strong&gt; and its related &lt;strong&gt;Bioinformatics&lt;/strong&gt; are upgraded to their 2.0 version. I never thought that, trained as a geneticist, I may one day work for Google. Good, bad or ironic? It might be too optimistic. There is a long way to go and the industries are actually more interested in the human health related area. As a relative small research community for maize or plant genomics studies, we are less attractive from industry’s point of view. &lt;/p&gt;

&lt;p&gt;Here, I will try to interpret the maize NGS data a little. This kind of study may be extended to other crop species later. After a close look, the data presented their own story. This kind of story might not be extracted from the papers alone. Below, I listed the top 10 maize projects according to their data output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/01JWlMz.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above figure, it seems like the maize genetic studies were expanding from their traditional research areas. Thanks to the continuous declining of the sequencing price, many genome wide studies become possible, such as geno-pheno association, transcriptome, methylome, etc. At the same time, the resources and talents were under “exon reshuffling” during this process. Some Chinese groups, including those from CAU, CAAS and Huazhong Agricultural University are rising. &lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Top 10 projects （&lt;a href=&quot;/data/SRA_maize_030614.csv&quot;&gt;download complete table&lt;/a&gt;）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Center&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Size (Gb)&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;CAAS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2426&lt;/td&gt;
      &lt;td&gt;transcriptome&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;MSU-BUELL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1247&lt;/td&gt;
      &lt;td&gt;Pan Transcriptome&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;CAU&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1224&lt;/td&gt;
      &lt;td&gt;Genome Re-sequencing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;CSHL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;964&lt;/td&gt;
      &lt;td&gt;Maize HapMap II&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Academia Sinica&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;626&lt;/td&gt;
      &lt;td&gt;Transcriptome of maize embryonic leaves&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;University of Minnesota&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;619&lt;/td&gt;
      &lt;td&gt;Transcriptome of IBM RILs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;CSHL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;572&lt;/td&gt;
      &lt;td&gt;Methylome&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;ISU&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;512&lt;/td&gt;
      &lt;td&gt;Zeanome&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;Cornell University&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;493&lt;/td&gt;
      &lt;td&gt;Breeding efforts in Africa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;MSU-BUELL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;450&lt;/td&gt;
      &lt;td&gt;Gene Expression of vitamin biosynthesis&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;In the U.S., from the above summary table of the sequencing data, I learned that different labs have their own focus. The &lt;strong&gt;lab&lt;/strong&gt; here, sometimes, should also refer to the efforts from their collaborators. Among these labs, Buckler’s group at Cornell, after finishing the zea mays HapMap project, was now aiming to sequencing every species of maize in the world using Genotyping-By-Sequencing (GBS). Recently, Buell’s lab at MSU released a large set of transcriptomic data. This group may lead the maize transcriptome analysis in the future. A group at CSHL did a lot of Methylome study. Another group at CSHL, Jackson’s lab, focused on the development studies, their efforts of transcriptomic sequencing at various developmental stages may eventually lead to a developmentome (I invented this term) some day. Other research subjects, such as ISU’s Zeanome and PAV, UC Davis R-I group’s domestication and evolution and University of Minnesota’s IBM RIL eQTL mapping, et. al.. &lt;/p&gt;

&lt;p&gt;Sequencing alone could not solve the biological problems until applied with sophisticated analyses. When genetics meets Big Data, the analysis itself become a problem. Traditional training did not prepared genetists with big data skills. In the future, the one who mastering the data tools and making sense of data would be more likely to success I guess. Genetics is now not limited to pipetting, pollinating or cloning, coding skills should be added to our toolkit as well.&lt;/p&gt;

&lt;p&gt;Big Data era in maize is coming, are you ready yet?&lt;/p&gt;

</description>
                <link>http://yangjl.com/en/bigdata%20of%20maize/2014/03/05/NCBI-SRA</link>
                <guid>http://yangjl.com/en/bigdata%20of%20maize/2014/03/05/NCBI-SRA</guid>
                <pubDate>2014-03-05T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, 
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately 
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code class=&quot;highlighter-rouge&quot;&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;
  This is where the generated site will be placed once Jekyll is done transforming it. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;
Posts are created by properly formatting a file and placing it the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;
A post must have a valid filename in the form &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. 
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This page will be available at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; as well as a page object variable: &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;
Templates are created by properly formatting a file and placing it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;
Templates should be coded in HTML and contain YAML Front Matter. 
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;
There is a special variable in all templates named : &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they 
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files 
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data. &lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. 
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template. &lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. 
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to 
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files. &lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;  &lt;br /&gt;
  These files go in &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through 
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code class=&quot;highlighter-rouge&quot;&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website. 
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one 
  big &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”. &lt;br /&gt;
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to 
a global &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format 
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []() 
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</description>
                <link>http://yangjl.com/en/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://yangjl.com/en/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-08:00</pubDate>
        </item>


</channel>
</rss>
